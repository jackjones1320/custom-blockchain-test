const SHA256 = require('crypto-js/sha256');


class Car {
    constructor(id, speed, range, position) {
        this.id = id;
        this.speed = speed;
        this.previousSpeed = speed; // Add a previousSpeed property
        this.range = 10;
        this.position = position;
    }
}


class Transaction {
    constructor(car1, car2, speed1, speed2, position, previousSpeed1, previousSpeed2) {
        this.car1 = car1;
        this.car2 = car2;
        this.speed1 = speed1;
        this.speed2 = speed2;
        this.position = position;
        this.previousSpeed1 = previousSpeed1; // Add previousSpeed1
        this.previousSpeed2 = previousSpeed2; // Add previousSpeed2
    }
}





class Block {
    constructor(index, timestamp, transactions, previousHash = '') {
        this.index = index; // Added index property
        this.timestamp = timestamp;
        this.transactions = transactions;
        this.previousHash = previousHash;
        this.hash = this.calculateHash();
    }

    calculateHash() {
        return SHA256(this.index + this.previousHash + this.timestamp + JSON.stringify(this.transactions)).toString();
    }
    mineBlock() {
        this.hash = this.calculateHash();
        console.log("Block mined: " + this.hash);
    }
}

class Blockchain {
    constructor() {
        this.chain = [this.createGenesisBlock()];
        this.cars = [];
    }
    createGenesisBlock() {
        return new Block(0, "01/02/2004", [], "0");
    }

    printBlockchainData() {
        let blockchainData = '';

        for (let i = 0; i < this.chain.length; i++) {
            const block = this.chain[i];
            blockchainData += `Block ${block.index}:\n`;
            blockchainData += `Timestamp: ${block.timestamp}\n`;
            blockchainData += `Transactions: ${JSON.stringify(block.transactions, null, 2)}\n`;
            blockchainData += `Previous Hash: ${block.previousHash}\n`;
            blockchainData += `Hash: ${block.hash}\n\n`;
        }

        console.log(blockchainData);
    }

    addcar(car) {
        this.cars.push(car);
    }

    addBlockIfCarsSeeEachOther() {
        const transactions = [];
        const loggedInteractions = new Set(); // To keep track of logged interactions
    
        for (let i = 0; i < this.cars.length; i++) {
            for (let j = i + 1; j < this.cars.length; j++) {
                const car1 = this.cars[i];
                const car2 = this.cars[j];
    
                // Create unique identifiers for the interaction
                const interactionId1 = `${car1.id}-${car2.id}`;
                const interactionId2 = `${car2.id}-${car1.id}`;
    
                // Check if the interaction has already been logged
                if (!loggedInteractions.has(interactionId1) && !loggedInteractions.has(interactionId2)) {
                    // Check if car2 is within the range of car1
                    if (Math.abs(car1.position - car2.position) <= car1.range) {
                        // Create a transaction with car numbers, speeds, positions, and previous speeds
                        transactions.push(new Transaction(
                            car1.id,
                            car2.id,
                            car1.speed,
                            car1.previousSpeed, // Add previousSpeed
                            car1.position,
                            car2.previousSpeed, // Add previousSpeed for car2
                        ));
                        // Update the previousSpeed for both cars
                        car1.previousSpeed = car1.speed;
                        car2.previousSpeed = car2.speed;
    
                        transactions.push(new Transaction(
                            car2.id,
                            car1.id,
                            car2.speed,
                            car2.previousSpeed, // Add previousSpeed for car2
                            car2.position,
                            car1.previousSpeed, // Add previousSpeed
                        ));
                        // Mark the interaction as logged
                        loggedInteractions.add(interactionId1);
                    }
                }
            }
        }
        // If there are transactions, create a block
        if (transactions.length > 0) {
            const timestamp = Date.now();
            const previousBlock = this.getLatestBlock();
    
            const block = new Block(this.chain.length, timestamp, transactions, previousBlock.hash);
            block.mineBlock();
    
            this.chain.push(block);
        }
    

        // If there are transactions, create a block
        if (transactions.length > 0) {
            const timestamp = Date.now();
            const previousBlock = this.getLatestBlock();
    
            const block = new Block(this.chain.length, timestamp, transactions, previousBlock.hash);
            block.mineBlock();
    
            this.chain.push(block);
        }
    }
   
    
    

    isChainValid() {
        for (let i = 1; i < this.chain.length; i++) {
            const currentBlock = this.chain[i];
            const previousBlock = this.chain[i - 1];

            if (currentBlock.hash !== currentBlock.calculateHash()) {
                return false;
            }
            if (currentBlock.previousHash !== previousBlock.hash) {
                return false;
            }
        }
        return true;
    }
    getLatestBlock() {
        return this.chain[this.chain.length - 1];
    }
    
}

let jujuBit = new Blockchain();

// Create and add 10 cars to the blockchain
for (let i = 1; i <= 10; i++) {
    jujuBit.addcar(new Car(i, 0, 10, 0)); // Create cars with IDs from 1 to 10
    console.log("Cars have been created.");
}


n = 1;
// Inside your simulation loop
while (n <= 10) {
    for (const car of jujuBit.cars) {
        // Calculate the distance traveled using the previous speed
        const distanceTraveled = car.previousSpeed; // Use the previous speed
        
        // Update the car's position
        car.position += distanceTraveled;
        
        // Store the current speed as the previous speed
        car.previousSpeed = car.speed;
        
        // Randomize speed for each car
        car.speed = Math.floor(Math.random() * 10);
    }
    
    // Check if cars see each other and add blocks
    jujuBit.addBlockIfCarsSeeEachOther();
    n++;
}





jujuBit.printBlockchainData();
console.log(JSON.stringify(jujuBit, null, 4));
console.log('Blockchain valid? ' + jujuBit.isChainValid()); //blockchain validity check
